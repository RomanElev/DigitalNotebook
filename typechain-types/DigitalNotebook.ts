/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DigitalNotebookInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createNote"
      | "deleteNote"
      | "getUserNotes"
      | "readNote"
      | "updateSharing"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NoteCreated"
      | "NoteDeleted"
      | "NoteShared"
      | "NoteUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createNote",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteNote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readNote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSharing",
    values: [BigNumberish, boolean, AddressLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "createNote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteNote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserNotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readNote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSharing",
    data: BytesLike
  ): Result;
}

export namespace NoteCreatedEvent {
  export type InputTuple = [noteId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [noteId: bigint, owner: string];
  export interface OutputObject {
    noteId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NoteDeletedEvent {
  export type InputTuple = [noteId: BigNumberish];
  export type OutputTuple = [noteId: bigint];
  export interface OutputObject {
    noteId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NoteSharedEvent {
  export type InputTuple = [noteId: BigNumberish, sharedWith: AddressLike];
  export type OutputTuple = [noteId: bigint, sharedWith: string];
  export interface OutputObject {
    noteId: bigint;
    sharedWith: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NoteUpdatedEvent {
  export type InputTuple = [noteId: BigNumberish];
  export type OutputTuple = [noteId: bigint];
  export interface OutputObject {
    noteId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DigitalNotebook extends BaseContract {
  connect(runner?: ContractRunner | null): DigitalNotebook;
  waitForDeployment(): Promise<this>;

  interface: DigitalNotebookInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createNote: TypedContractMethod<
    [content: string, isPublic: boolean],
    [void],
    "nonpayable"
  >;

  deleteNote: TypedContractMethod<[noteId: BigNumberish], [void], "nonpayable">;

  getUserNotes: TypedContractMethod<[], [bigint[]], "view">;

  readNote: TypedContractMethod<[noteId: BigNumberish], [string], "view">;

  updateSharing: TypedContractMethod<
    [noteId: BigNumberish, isPublic: boolean, sharedWith: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createNote"
  ): TypedContractMethod<
    [content: string, isPublic: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteNote"
  ): TypedContractMethod<[noteId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getUserNotes"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "readNote"
  ): TypedContractMethod<[noteId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "updateSharing"
  ): TypedContractMethod<
    [noteId: BigNumberish, isPublic: boolean, sharedWith: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NoteCreated"
  ): TypedContractEvent<
    NoteCreatedEvent.InputTuple,
    NoteCreatedEvent.OutputTuple,
    NoteCreatedEvent.OutputObject
  >;
  getEvent(
    key: "NoteDeleted"
  ): TypedContractEvent<
    NoteDeletedEvent.InputTuple,
    NoteDeletedEvent.OutputTuple,
    NoteDeletedEvent.OutputObject
  >;
  getEvent(
    key: "NoteShared"
  ): TypedContractEvent<
    NoteSharedEvent.InputTuple,
    NoteSharedEvent.OutputTuple,
    NoteSharedEvent.OutputObject
  >;
  getEvent(
    key: "NoteUpdated"
  ): TypedContractEvent<
    NoteUpdatedEvent.InputTuple,
    NoteUpdatedEvent.OutputTuple,
    NoteUpdatedEvent.OutputObject
  >;

  filters: {
    "NoteCreated(uint256,address)": TypedContractEvent<
      NoteCreatedEvent.InputTuple,
      NoteCreatedEvent.OutputTuple,
      NoteCreatedEvent.OutputObject
    >;
    NoteCreated: TypedContractEvent<
      NoteCreatedEvent.InputTuple,
      NoteCreatedEvent.OutputTuple,
      NoteCreatedEvent.OutputObject
    >;

    "NoteDeleted(uint256)": TypedContractEvent<
      NoteDeletedEvent.InputTuple,
      NoteDeletedEvent.OutputTuple,
      NoteDeletedEvent.OutputObject
    >;
    NoteDeleted: TypedContractEvent<
      NoteDeletedEvent.InputTuple,
      NoteDeletedEvent.OutputTuple,
      NoteDeletedEvent.OutputObject
    >;

    "NoteShared(uint256,address)": TypedContractEvent<
      NoteSharedEvent.InputTuple,
      NoteSharedEvent.OutputTuple,
      NoteSharedEvent.OutputObject
    >;
    NoteShared: TypedContractEvent<
      NoteSharedEvent.InputTuple,
      NoteSharedEvent.OutputTuple,
      NoteSharedEvent.OutputObject
    >;

    "NoteUpdated(uint256)": TypedContractEvent<
      NoteUpdatedEvent.InputTuple,
      NoteUpdatedEvent.OutputTuple,
      NoteUpdatedEvent.OutputObject
    >;
    NoteUpdated: TypedContractEvent<
      NoteUpdatedEvent.InputTuple,
      NoteUpdatedEvent.OutputTuple,
      NoteUpdatedEvent.OutputObject
    >;
  };
}
